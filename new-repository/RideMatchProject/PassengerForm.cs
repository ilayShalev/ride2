using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;
using GMap.NET;
using GMap.NET.WindowsForms;
using GMap.NET.WindowsForms.Markers;
using RideMatchProject.Models;
using RideMatchProject.Services;
using RideMatchProject.UI;
using RideMatchProject.Utilities;

namespace RideMatchProject
{
    /// <summary>
    /// Main passenger form that displays ride information and allows location selection
    /// </summary>
    public partial class PassengerForm : Form
    {
        // Core components
        private PassengerController _controller;
        private UIManager _uiManager;
        private DataAccessLayer _dataLayer;
        private MapVisualizer _mapVisualizer;

        // Store dependencies for designer support
        private readonly int _userId;
        private readonly string _username;

        /// <summary>
        /// Constructor for the passenger form
        /// </summary>
        public PassengerForm(DatabaseService dbService, MapService mapService, int userId, string username)
        {
            _userId = userId;
            _username = username;

            // Call the designer's InitializeComponent method
            InitializeComponent();

            InitializeServices(dbService, mapService);
            ConfigureForm();
            SubscribeToEvents();
        }

        /// <summary>
        /// Set up all services and dependencies
        /// </summary>
        private void InitializeServices(DatabaseService dbService, MapService mapService)
        {
            // Create UI components first
            _uiManager = new UIManager(this, _username);

            // Set up data access
            _dataLayer = new DataAccessLayer(dbService, _userId, _username);

            // Set up map visualization
            _mapVisualizer = new MapVisualizer(mapService, dbService, _uiManager.GetMapControl());

            // Create the controller last, injecting all dependencies
            _controller = new PassengerController(_dataLayer, _mapVisualizer, _uiManager);
        }

        /// <summary>
        /// Configure form appearance
        /// </summary>
        private void ConfigureForm()
        {
            Size = new Size(1000, 700);
            FormBorderStyle = FormBorderStyle.FixedDialog;
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Passenger Dashboard";
        }

        /// <summary>
        /// Subscribe to form events
        /// </summary>
        private void SubscribeToEvents()
        {
            // Simply add our event handler - the designer's handlers will also run
            Load += OnFormLoad;
        }

        /// <summary>
        /// Handle form load event
        /// </summary>
        private async void OnFormLoad(object sender, EventArgs e)
        {
            try
            {
                // Run directly on UI thread to avoid cross-thread errors
                await _controller.InitializeAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data: {ex.Message}",
                    "Initialization Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Event handler required by the designer
        /// </summary>
        public void PassengerForm_Load(object sender, EventArgs e)
        {
            // Call our implementation method
            OnFormLoad(sender, e);
        }

        // Do not implement InitializeComponent - it's generated by the designer
    }

    /// <summary>
    /// Controller for passenger form logic
    /// </summary>
    public class PassengerController
    {
        private readonly DataAccessLayer _dataLayer;
        private readonly MapVisualizer _mapVisualizer;
        private readonly UIManager _uiManager;
        private bool _isSettingLocation;

        public PassengerController(
            DataAccessLayer dataLayer,
            MapVisualizer mapVisualizer,
            UIManager uiManager)
        {
            _dataLayer = dataLayer;
            _mapVisualizer = mapVisualizer;
            _uiManager = uiManager;
            _isSettingLocation = false;

            SubscribeToEvents();
        }

        private void SubscribeToEvents()
        {
            _uiManager.AvailabilityChanged += async (sender, isAvailable) =>
                await UpdateAvailabilityAsync(isAvailable);

            _uiManager.RefreshRequested += async (sender, args) =>
                await RefreshDataAsync();

            _uiManager.SetLocationRequested += (sender, args) =>
                EnableLocationSelection();

            _uiManager.AddressSearchRequested += async (sender, address) =>
                await SearchAddressAsync(address);

            _mapVisualizer.MapClicked += (sender, point) =>
                HandleMapClick(point);
        }

        public async Task InitializeAsync()
        {
            _uiManager.ShowLoadingMessage("Initializing...");
            await _mapVisualizer.InitializeMapAsync();
            await RefreshDataAsync();
        }

        private async Task RefreshDataAsync()
        {
            _uiManager.ShowLoadingMessage("Loading passenger data...");
            await _dataLayer.LoadPassengerDataAsync();

            var passenger = _dataLayer.CurrentPassenger;
            var vehicle = _dataLayer.AssignedVehicle;

            if (passenger != null)
            {
                _uiManager.UpdateAvailabilityControl(passenger.IsAvailableTomorrow);
                _uiManager.DisplayPassengerDetails(passenger, vehicle, _dataLayer.PickupTime);
                _mapVisualizer.DisplayPassenger(passenger, vehicle);
            }
            else
            {
                _uiManager.ShowNoProfileMessage();
            }
        }

        private void EnableLocationSelection()
        {
            _isSettingLocation = true;
            _uiManager.ShowLocationSelectionInstructions(true);
            _mapVisualizer.EnableLocationSelection(true);
        }

        private void HandleMapClick(PointLatLng point)
        {
            if (!_isSettingLocation)
            {
                return;
            }

            _isSettingLocation = false;
            _uiManager.ShowLocationSelectionInstructions(false);
            _mapVisualizer.EnableLocationSelection(false);

            UpdatePassengerLocationAsync(point.Lat, point.Lng);
        }

        private async Task SearchAddressAsync(string address)
        {
            _uiManager.SetSearchControlsEnabled(false);

            var coordinates = await _mapVisualizer.GeocodeAddressAsync(address);
            if (coordinates.HasValue)
            {
                await UpdatePassengerLocationAsync(coordinates.Value.Latitude, coordinates.Value.Longitude);
            }
            else
            {
                _uiManager.ShowErrorMessage("Address not found. Please try again.");
            }

            _uiManager.SetSearchControlsEnabled(true);
        }

        private async Task UpdatePassengerLocationAsync(double latitude, double longitude)
        {
            _uiManager.ShowBusyState(true);

            string address = await _mapVisualizer.ReverseGeocodeAsync(latitude, longitude);
            await _dataLayer.UpdatePassengerLocationAsync(latitude, longitude, address);

            _uiManager.ShowLocationUpdatedMessage(address);
            await RefreshDataAsync();

            _uiManager.ShowBusyState(false);
        }

        private async Task UpdateAvailabilityAsync(bool isAvailable)
        {
            var passenger = _dataLayer.CurrentPassenger;
            if (passenger == null)
            {
                return;
            }

            bool success = await _dataLayer.UpdatePassengerAvailabilityAsync(isAvailable);

            if (success)
            {
                if (isAvailable && _dataLayer.AssignedVehicle == null)
                {
                    _uiManager.ShowRideRequestMessage();
                }
            }
            else
            {
                _uiManager.ShowErrorMessage("Failed to update availability");
                _uiManager.UpdateAvailabilityControl(passenger.IsAvailableTomorrow);
            }

            await RefreshDataAsync();
        }
    }

    /// <summary>
    /// Handles access to data layer and database operations
    /// </summary>
    public class DataAccessLayer
    {
        private readonly DatabaseService _databaseService;
        private readonly int _userId;
        private readonly string _username;

        public Passenger CurrentPassenger { get; private set; }
        public Vehicle AssignedVehicle { get; private set; }
        public DateTime? PickupTime { get; private set; }

        public DataAccessLayer(DatabaseService databaseService, int userId, string username)
        {
            _databaseService = databaseService;
            _userId = userId;
            _username = username;
        }



        public async Task LoadPassengerDataAsync()
        {
            try
            {
                CurrentPassenger = await _databaseService.GetPassengerByUserIdAsync(_userId);

                if (CurrentPassenger != null)
                {
                    var destination = await _databaseService.GetDestinationAsync();

                    // Use the common helper to determine which date to query
                    string queryDate = RouteScheduleHelper.GetRouteQueryDate(destination.TargetTime);

                    var assignment = await _databaseService.GetPassengerAssignmentAsync(
                        _userId, queryDate);

                    AssignedVehicle = assignment.AssignedVehicle;
                    PickupTime = assignment.PickupTime;

                    if (CurrentPassenger.Id > 0)
                    {
                        var fullPassenger = await _databaseService.GetPassengerByIdAsync(CurrentPassenger.Id);

                        if (fullPassenger != null && !string.IsNullOrEmpty(fullPassenger.EstimatedPickupTime))
                        {
                            CurrentPassenger.EstimatedPickupTime = fullPassenger.EstimatedPickupTime;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new DataException("Failed to load passenger data", ex);
            }
        }
        public async Task<bool> UpdatePassengerAvailabilityAsync(bool isAvailable)
        {
            if (CurrentPassenger == null)
            {
                return false;
            }

            try
            {
                bool success = await _databaseService.UpdatePassengerAvailabilityAsync(
                    CurrentPassenger.Id, isAvailable);

                if (success)
                {
                    CurrentPassenger.IsAvailableTomorrow = isAvailable;
                }

                return success;
            }
            catch (Exception)
            {
                return false;
            }
        }

        public async Task UpdatePassengerLocationAsync(double latitude, double longitude, string address)
        {
            try
            {
                if (CurrentPassenger == null)
                {
                    int passengerId = await _databaseService.AddPassengerAsync(
                        _userId, _username, latitude, longitude, address);

                    CurrentPassenger = new Passenger
                    {
                        Id = passengerId,
                        UserId = _userId,
                        Name = _username,
                        Latitude = latitude,
                        Longitude = longitude,
                        Address = address,
                        IsAvailableTomorrow = true
                    };
                }
                else
                {
                    CurrentPassenger.Latitude = latitude;
                    CurrentPassenger.Longitude = longitude;
                    CurrentPassenger.Address = address;

                    await _databaseService.UpdatePassengerAsync(
                        CurrentPassenger.Id,
                        CurrentPassenger.Name,
                        latitude,
                        longitude,
                        address);
                }
            }
            catch (Exception ex)
            {
                throw new DataException("Failed to update passenger location", ex);
            }
        }
    }

    /// <summary>
    /// Manages map visualization and location services
    /// </summary>
    public class MapVisualizer
    {
        private readonly MapService _mapService;
        private readonly DatabaseService _databaseService;
        private readonly GMapControl _mapControl;

        public event EventHandler<PointLatLng> MapClicked;

        public MapVisualizer(MapService mapService, DatabaseService databaseService, GMapControl mapControl)
        {
            _mapService = mapService;
            _databaseService = databaseService;
            _mapControl = mapControl;
        }

        public async Task InitializeMapAsync()
        {
            if (_mapControl != null)
            {
                EnsureUIThread(() => {
                    _mapService.InitializeGoogleMaps(_mapControl);
                    _mapControl.Position = new PointLatLng(32.0741, 34.7922); // Default to Tel Aviv
                    _mapControl.Zoom = 12;
                });
            }
        }

        public void EnableLocationSelection(bool enable)
        {
            if (_mapControl == null)
            {
                return;
            }

            EnsureUIThread(() => {
                _mapControl.Cursor = enable ? Cursors.Hand : Cursors.Default;

                if (enable)
                {
                    _mapControl.MouseClick += HandleMapClick;
                }
                else
                {
                    _mapControl.MouseClick -= HandleMapClick;
                }
            });
        }

        private void HandleMapClick(object sender, MouseEventArgs e)
        {
            if (_mapControl == null) return;

            PointLatLng point = _mapControl.FromLocalToLatLng(e.X, e.Y);
            MapClicked?.Invoke(this, point);
        }

        public async Task<(double Latitude, double Longitude)?> GeocodeAddressAsync(string address)
        {
            return await _mapService.GeocodeAddressAsync(address);
        }

        public async Task<string> ReverseGeocodeAsync(double latitude, double longitude)
        {
            return await _mapService.ReverseGeocodeAsync(latitude, longitude);
        }

        public void DisplayPassenger(Passenger passenger, Vehicle vehicle)
        {
            if (_mapControl == null || passenger == null)
            {
                return;
            }

            EnsureUIThread(() => {
                _mapControl.Overlays.Clear();

                var passengersOverlay = new GMapOverlay("passengers");
                var marker = MapOverlays.CreatePassengerMarker(passenger);
                passengersOverlay.Markers.Add(marker);
                _mapControl.Overlays.Add(passengersOverlay);

                if (vehicle != null)
                {
                    DisplayDestination();
                }

                _mapControl.Position = new PointLatLng(passenger.Latitude, passenger.Longitude);
                _mapControl.Zoom = 15;
                _mapControl.Refresh();
            });
        }

        private void DisplayDestination()
        {
            Task.Run(async () => {
                var destination = await GetDestinationAsync();

                EnsureUIThread(() => {
                    try
                    {
                        var destinationOverlay = new GMapOverlay("destination");
                        var destinationMarker = MapOverlays.CreateDestinationMarker(
                            destination.Latitude, destination.Longitude);

                        destinationOverlay.Markers.Add(destinationMarker);
                        _mapControl.Overlays.Add(destinationOverlay);
                        _mapControl.Refresh();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error creating destination marker: {ex.Message}");
                    }
                });
            });
        }

        private async Task<(double Latitude, double Longitude)> GetDestinationAsync()
        {
            var destination = await _databaseService.GetDestinationAsync();
            return (destination.Latitude, destination.Longitude);
        }

        /// <summary>
        /// Ensures that code runs on the UI thread
        /// </summary>
        private void EnsureUIThread(Action action)
        {
            if (_mapControl.InvokeRequired)
            {
                try
                {
                    _mapControl.Invoke(action);
                }
                catch (ObjectDisposedException)
                {
                    // Control may have been disposed if form is closing
                }
                catch (InvalidOperationException)
                {
                    // Handle case where handle isn't created yet
                }
            }
            else
            {
                action();
            }
        }
    }

    /// <summary>
    /// Manages the user interface components
    /// </summary>
    public class UIManager
    {
        private readonly Form _parentForm;
        private readonly string _username;

        private GMapControl _mapControl;
        private CheckBox _availabilityCheckBox;
        private RichTextBox _detailsTextBox;
        private Button _refreshButton;
        private Button _logoutButton;
        private Button _setLocationButton;
        private TextBox _addressTextBox;
        private Button _searchButton;
        private Label _instructionsLabel;
        private Panel _leftPanel;

        public event EventHandler<bool> AvailabilityChanged;
        public event EventHandler RefreshRequested;
        public event EventHandler SetLocationRequested;
        public event EventHandler<string> AddressSearchRequested;

        public UIManager(Form parentForm, string username)
        {
            _parentForm = parentForm;
            _username = username;

            InitializeUI();
        }

        public void InitializeUI()
        {
            CreateTitleLabel();
            CreateLeftPanel();
            CreateMapControl();

            CreateAvailabilitySection();
            CreateDetailsSection();
            CreateLocationSection();
            CreateActionButtons();
        }

        private void CreateTitleLabel()
        {
            var titleLabel = new Label
            {
                Text = $"Welcome, {_username}",
                Location = new Point(20, 20),
                Size = new Size(960, 30),
                Font = new Font("Arial", 16, FontStyle.Bold),
                TextAlign = ContentAlignment.MiddleCenter
            };
            _parentForm.Controls.Add(titleLabel);
        }

        private void CreateLeftPanel()
        {
            _leftPanel = new Panel
            {
                Location = new Point(20, 70),
                Size = new Size(350, 580),
                BorderStyle = BorderStyle.FixedSingle
            };
            _parentForm.Controls.Add(_leftPanel);
        }

        private void CreateMapControl()
        {
            _mapControl = new GMapControl
            {
                Location = new Point(390, 70),
                Size = new Size(580, 580),
                MinZoom = 2,
                MaxZoom = 18,
                Zoom = 13,
                DragButton = MouseButtons.Left
            };
            _parentForm.Controls.Add(_mapControl);
        }

        private void CreateAvailabilitySection()
        {
            var statusLabel = new Label
            {
                Text = "Tomorrow's Status:",
                Location = new Point(20, 20),
                Size = new Size(150, 20),
                Font = new Font("Arial", 10, FontStyle.Bold)
            };
            _leftPanel.Controls.Add(statusLabel);

            _availabilityCheckBox = new CheckBox
            {
                Text = "I need a ride tomorrow",
                Location = new Point(20, 50),
                Size = new Size(300, 30),
                Checked = true
            };

            _availabilityCheckBox.CheckedChanged += (s, e) =>
                AvailabilityChanged?.Invoke(this, _availabilityCheckBox.Checked);

            _leftPanel.Controls.Add(_availabilityCheckBox);

            var divider = new Panel
            {
                Location = new Point(20, 90),
                Size = new Size(310, 2),
                BorderStyle = BorderStyle.FixedSingle,
                BackColor = Color.Gray
            };
            _leftPanel.Controls.Add(divider);
        }

        private void CreateDetailsSection()
        {
            var detailsLabel = new Label
            {
                Text = "Your Ride Details:",
                Location = new Point(20, 110),
                Size = new Size(200, 20),
                Font = new Font("Arial", 10, FontStyle.Bold)
            };
            _leftPanel.Controls.Add(detailsLabel);

            _detailsTextBox = new RichTextBox
            {
                Location = new Point(20, 140),
                Size = new Size(310, 200),
                ReadOnly = true
            };
            _leftPanel.Controls.Add(_detailsTextBox);
        }

        private void CreateLocationSection()
        {
            var divider = new Panel
            {
                Location = new Point(20, 350),
                Size = new Size(310, 2),
                BorderStyle = BorderStyle.FixedSingle,
                BackColor = Color.Gray
            };
            _leftPanel.Controls.Add(divider);

            var locationLabel = new Label
            {
                Text = "Set Your Pickup Location:",
                Location = new Point(20, 360),
                Size = new Size(200, 20),
                Font = new Font("Arial", 10, FontStyle.Bold)
            };
            _leftPanel.Controls.Add(locationLabel);

            // Create button without event handler first
            _setLocationButton = new Button
            {
                Text = "Set Location on Map",
                Location = new Point(20, 390),
                Size = new Size(150, 30)
            };
            // Add event handler separately
            _setLocationButton.Click += (s, e) => SetLocationRequested?.Invoke(this, EventArgs.Empty);
            _leftPanel.Controls.Add(_setLocationButton);

            var searchLabel = new Label
            {
                Text = "Or Search Address:",
                Location = new Point(20, 430),
                Size = new Size(150, 20)
            };
            _leftPanel.Controls.Add(searchLabel);

            _addressTextBox = new TextBox
            {
                Location = new Point(20, 455),
                Size = new Size(220, 25)
            };

            // Create button without event handler first
            _searchButton = new Button
            {
                Text = "Search",
                Location = new Point(250, 455),
                Size = new Size(80, 25)
            };
            // Add event handler separately
            _searchButton.Click += (s, e) => AddressSearchRequested?.Invoke(this, _addressTextBox.Text);
            _leftPanel.Controls.Add(_addressTextBox);
            _leftPanel.Controls.Add(_searchButton);

            _instructionsLabel = new Label
            {
                Text = "Click on the map to set your pickup location",
                Location = new Point(20, 490),
                Size = new Size(310, 20),
                TextAlign = ContentAlignment.MiddleCenter,
                ForeColor = Color.Red,
                Visible = false
            };
            _leftPanel.Controls.Add(_instructionsLabel);
        }

        private void CreateActionButtons()
        {
            // Create button without event handler first
            _refreshButton = new Button
            {
                Text = "Refresh",
                Location = new Point(20, 530),
                Size = new Size(150, 30)
            };
            // Add event handler separately
            _refreshButton.Click += (s, e) => RefreshRequested?.Invoke(this, EventArgs.Empty);
            _leftPanel.Controls.Add(_refreshButton);

            // Create button without event handler first
            _logoutButton = new Button
            {
                Text = "Logout",
                Location = new Point(180, 530),
                Size = new Size(150, 30)
            };
            // Add event handler separately
            _logoutButton.Click += (s, e) => _parentForm.Close();
            _leftPanel.Controls.Add(_logoutButton);
        }

        public void ShowLoadingMessage(string message)
        {
            InvokeOnUIThread(() => {
                _detailsTextBox.Clear();
                _detailsTextBox.AppendText(message);
                _refreshButton.Enabled = false;
            });
        }

        public void DisplayPassengerDetails(Passenger passenger, Vehicle vehicle, DateTime? pickupTime)
        {
            InvokeOnUIThread(() => {
                if (_detailsTextBox == null)
                {
                    return;
                }

                _detailsTextBox.Clear();

                AppendPassengerInfo(passenger);

                if (vehicle != null)
                {
                    AppendVehicleInfo(vehicle, passenger, pickupTime);
                }
                else
                {
                    AppendNoVehicleMessage();
                }

                _refreshButton.Enabled = true;
            });
        }

        private void AppendPassengerInfo(Passenger passenger)
        {
            _detailsTextBox.SelectionFont = new Font(_detailsTextBox.Font, FontStyle.Bold);
            _detailsTextBox.AppendText("Your Information:\n");
            _detailsTextBox.SelectionFont = _detailsTextBox.Font;
            _detailsTextBox.AppendText($"Name: {passenger.Name}\n");

            if (!string.IsNullOrEmpty(passenger.Address))
            {
                _detailsTextBox.AppendText($"Pickup Location: {passenger.Address}\n\n");
            }
            else
            {
                _detailsTextBox.AppendText(
                    $"Pickup Location: ({passenger.Latitude:F6}, {passenger.Longitude:F6})\n\n");
            }
        }

        private void AppendVehicleInfo(Vehicle vehicle, Passenger passenger, DateTime? pickupTime)
        {
            _detailsTextBox.SelectionFont = new Font(_detailsTextBox.Font, FontStyle.Bold);
            _detailsTextBox.AppendText("Your Scheduled Ride:\n");
            _detailsTextBox.SelectionFont = _detailsTextBox.Font;

            string driverName = !string.IsNullOrEmpty(vehicle.DriverName)
                ? vehicle.DriverName
                : $"Driver #{vehicle.Id}";

            _detailsTextBox.AppendText($"Driver: {driverName}\n");

            if (!string.IsNullOrEmpty(vehicle.Model))
            {
                _detailsTextBox.AppendText($"Vehicle: {vehicle.Model}\n");
            }

            if (!string.IsNullOrEmpty(vehicle.Color))
            {
                _detailsTextBox.AppendText($"Color: {vehicle.Color}\n");
            }

            if (!string.IsNullOrEmpty(vehicle.LicensePlate))
            {
                _detailsTextBox.AppendText($"License Plate: {vehicle.LicensePlate}\n");
            }

            AppendPickupTimeInfo(pickupTime);

            if (!string.IsNullOrEmpty(vehicle.StartAddress))
            {
                _detailsTextBox.AppendText($"Driver Starting From: {vehicle.StartAddress}\n");
            }
        }

        private void AppendPickupTimeInfo(DateTime? pickupTime)
        {
            if (pickupTime.HasValue)
            {
                _detailsTextBox.SelectionFont = new Font(_detailsTextBox.Font, FontStyle.Bold);
                _detailsTextBox.AppendText($"Pickup Time: {pickupTime.Value.ToString("HH:mm")}\n");
                _detailsTextBox.SelectionFont = _detailsTextBox.Font;
            }
    
            else
            {
                _detailsTextBox.AppendText("Pickup Time: Not yet scheduled\n");
            }
        }

        private void AppendNoVehicleMessage()
        {
            _detailsTextBox.SelectionFont = new Font(_detailsTextBox.Font, FontStyle.Bold);
            _detailsTextBox.AppendText("No Ride Scheduled Yet\n");
            _detailsTextBox.SelectionFont = _detailsTextBox.Font;
            _detailsTextBox.AppendText("Rides for tomorrow will be assigned by the system overnight.\n");
            _detailsTextBox.AppendText("Please check back tomorrow morning for your ride details.\n");
        }

        public void ShowNoProfileMessage()
        {
            InvokeOnUIThread(() => {
                _detailsTextBox.Clear();
                _detailsTextBox.AppendText("No passenger profile found. Set your location to create a profile.\n");
                _refreshButton.Enabled = true;
            });
        }

        public void ShowErrorMessage(string message)
        {
            InvokeOnUIThread(() => {
                MessageBox.Show(message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            });
        }

        public void ShowLocationUpdatedMessage(string address)
        {
            InvokeOnUIThread(() => {
                MessageBox.Show($"Your pickup location has been set to:\n{address}",
                    "Location Updated", MessageBoxButtons.OK, MessageBoxIcon.Information);
            });
        }

        public void ShowRideRequestMessage()
        {
            InvokeOnUIThread(() => {
                MessageBox.Show("Your ride request has been submitted. A driver will be assigned soon.",
                    "Status Updated", MessageBoxButtons.OK, MessageBoxIcon.Information);
            });
        }

        public void UpdateAvailabilityControl(bool isAvailable)
        {
            InvokeOnUIThread(() => {
                _availabilityCheckBox.CheckedChanged -= (s, e) =>
                    AvailabilityChanged?.Invoke(this, _availabilityCheckBox.Checked);

                _availabilityCheckBox.Checked = isAvailable;

                _availabilityCheckBox.CheckedChanged += (s, e) =>
                    AvailabilityChanged?.Invoke(this, _availabilityCheckBox.Checked);
            });
        }

        public void ShowLocationSelectionInstructions(bool visible)
        {
            InvokeOnUIThread(() => {
                _instructionsLabel.Visible = visible;
            });
        }

        public void SetSearchControlsEnabled(bool enabled)
        {
            InvokeOnUIThread(() => {
                _addressTextBox.Enabled = enabled;
                _searchButton.Enabled = enabled;
                _parentForm.Cursor = enabled ? Cursors.Default : Cursors.WaitCursor;
            });
        }

        public void ShowBusyState(bool busy)
        {
            InvokeOnUIThread(() => {
                _parentForm.Cursor = busy ? Cursors.WaitCursor : Cursors.Default;
            });
        }

        public GMapControl GetMapControl()
        {
            return _mapControl;
        }

        /// <summary>
        /// Ensures that the provided action runs on the UI thread
        /// </summary>
        private void InvokeOnUIThread(Action action)
        {
            if (_parentForm.InvokeRequired)
            {
                try
                {
                    _parentForm.Invoke(action);
                }
                catch (ObjectDisposedException)
                {
                    // Form may have been closed
                }
                catch (InvalidOperationException)
                {
                    // Handle case where form handle isn't created yet
                }
            }
            else
            {
                action();
            }
        }
    }

    /// <summary>
    /// Custom exception for data operations
    /// </summary>
    public class DataException : Exception
    {
        public DataException(string message) : base(message)
        {
        }

        public DataException(string message, Exception innerException) : base(message, innerException)
        {
        }
    }
}