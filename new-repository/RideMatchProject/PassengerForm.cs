using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;
using GMap.NET;
using GMap.NET.WindowsForms;
using GMap.NET.WindowsForms.Markers;
using RideMatchProject.Models;
using RideMatchProject.Services;
using RideMatchProject.UI;
using RideMatchProject.Utilities;
using RideMatchProject.PassengerClasses;

namespace RideMatchProject
{
    /// <summary>
    /// Main passenger form that displays ride information and allows location selection
    /// </summary>
    public partial class PassengerForm : Form
    {
        // Core logic components
        private PassengerController _controller;
        private PassengerUIManager _uiManager;
        private PassengerDataAccessLayer _dataLayer;
        private MapVisualizer _mapVisualizer;

        // User data
        private readonly int _userId;
        private readonly string _username;

        /// <summary>
        /// Constructor for the passenger form
        /// </summary>
        /// <param name="dbService">Shared database service</param>
        /// <param name="mapService">Shared map service for routing and visualization</param>
        /// <param name="userId">Current user's ID</param>
        /// <param name="username">Current user's name</param>
        public PassengerForm(DatabaseService dbService, MapService mapService, int userId, string username)
        {
            _userId = userId;
            _username = username;

            InitializeComponent(); // Initializes all controls defined in the designer

            InitializeServices(dbService, mapService); // Inject dependencies and create logic components
            ConfigureForm();                            // Basic form setup: size, title, etc.
            SubscribeToEvents();                        // Attach event handlers
        }

        /// <summary>
        /// Initializes internal services and wiring between UI, map and logic
        /// </summary>
        private void InitializeServices(DatabaseService dbService, MapService mapService)
        {
            // Create and configure the UI manager first
            _uiManager = new PassengerUIManager(this, _username);

            // Connect data access layer for retrieving and updating ride info
            _dataLayer = new PassengerDataAccessLayer(dbService, _userId, _username);

            // Initialize map rendering and interaction features
            _mapVisualizer = new MapVisualizer(mapService, dbService, _uiManager.GetMapControl());

            // Central controller coordinating between UI, map, and data
            _controller = new PassengerController(_dataLayer, _mapVisualizer, _uiManager);
        }

        /// <summary>
        /// Sets form appearance and fixed window behavior
        /// </summary>
        private void ConfigureForm()
        {
            Size = new Size(1000, 700); // Fixed window size
            FormBorderStyle = FormBorderStyle.FixedDialog; // User cannot resize
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Passenger Dashboard"; // Title bar text
        }

        /// <summary>
        /// Subscribes internal methods to form events (besides designer events)
        /// </summary>
        private void SubscribeToEvents()
        {
            Load += OnFormLoad;
        }

        /// <summary>
        /// Executed when form is loaded — triggers initialization logic in controller
        /// </summary>
        private async void OnFormLoad(object sender, EventArgs e)
        {
            try
            {
                await _controller.InitializeAsync(); // Load data, populate UI, etc.
            }
            catch (Exception ex)
            {
                // Inform the user about initialization failure
                MessageBox.Show($"Error loading data: {ex.Message}",
                    "Initialization Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Dummy handler to satisfy designer-generated call — routes to main logic
        /// </summary>
        public void PassengerForm_Load(object sender, EventArgs e)
        {
            OnFormLoad(sender, e);
        }

        // Note: InitializeComponent() is automatically generated by the Windows Forms Designer.
    }

    /// <summary>
    /// Custom exception class used to represent data access failures or inconsistencies
    /// </summary>
    public class DataException : Exception
    {
        public DataException(string message) : base(message) { }

        public DataException(string message, Exception innerException) : base(message, innerException) { }
    }
}
