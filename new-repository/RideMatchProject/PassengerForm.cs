using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;
using GMap.NET;
using GMap.NET.WindowsForms;
using GMap.NET.WindowsForms.Markers;
using RideMatchProject.Models;
using RideMatchProject.Services;
using RideMatchProject.UI;
using RideMatchProject.Utilities;
using RideMatchProject.PassengerClasses;

namespace RideMatchProject
{
    /// <summary>
    /// Main passenger form that displays ride information and allows location selection
    /// </summary>
    public partial class PassengerForm : Form
    {
        // Core components
        private PassengerController _controller;
        private PassengerUIManager _uiManager;
        private PassengerDataAccessLayer _dataLayer;
        private MapVisualizer _mapVisualizer;

        // Store dependencies for designer support
        private readonly int _userId;
        private readonly string _username;

        /// <summary>
        /// Constructor for the passenger form
        /// </summary>
        public PassengerForm(DatabaseService dbService, MapService mapService, int userId, string username)
        {
            _userId = userId;
            _username = username;

            // Call the designer's InitializeComponent method
            InitializeComponent();

            InitializeServices(dbService, mapService);
            ConfigureForm();
            SubscribeToEvents();
        }

        /// <summary>
        /// Set up all services and dependencies
        /// </summary>
        private void InitializeServices(DatabaseService dbService, MapService mapService)
        {
            // Create UI components first
            _uiManager = new PassengerUIManager(this, _username);

            // Set up data access
            _dataLayer = new PassengerDataAccessLayer(dbService, _userId, _username);

            // Set up map visualization
            _mapVisualizer = new MapVisualizer(mapService, dbService, _uiManager.GetMapControl());

            // Create the controller last, injecting all dependencies
            _controller = new PassengerController(_dataLayer, _mapVisualizer, _uiManager);
        }

        /// <summary>
        /// Configure form appearance
        /// </summary>
        private void ConfigureForm()
        {
            Size = new Size(1000, 700);
            FormBorderStyle = FormBorderStyle.FixedDialog;
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Passenger Dashboard";
        }

        /// <summary>
        /// Subscribe to form events
        /// </summary>
        private void SubscribeToEvents()
        {
            // Simply add our event handler - the designer's handlers will also run
            Load += OnFormLoad;
        }

        /// <summary>
        /// Handle form load event
        /// </summary>
        private async void OnFormLoad(object sender, EventArgs e)
        {
            try
            {
                // Run directly on UI thread to avoid cross-thread errors
                await _controller.InitializeAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data: {ex.Message}",
                    "Initialization Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Event handler required by the designer
        /// </summary>
        public void PassengerForm_Load(object sender, EventArgs e)
        {
            // Call our implementation method
            OnFormLoad(sender, e);
        }

        // Do not implement InitializeComponent - it's generated by the designer
    }





 

    /// <summary>
    /// Custom exception for data operations
    /// </summary>
    public class DataException : Exception
    {
        public DataException(string message) : base(message)
        {
        }

        public DataException(string message, Exception innerException) : base(message, innerException)
        {
        }
    }
}